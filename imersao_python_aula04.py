# -*- coding: utf-8 -*-
"""Imersao-Python-Aula04.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hLI8jjW0XyToY4pZnc8op8OWvTg_ynXE

# Aula 4 da Imersão Python: Do Excel à Análise de Dados
> #### Instituição: Alura  
> #### Objetivo: construir gráficos de velas com Matplotlib e realizar ações mais avançadas, como gráficos interativos com Plotly.
> #### Autora: Carla Edila Silveira
> #### Data: 28/03/2024

><img src='https://i.postimg.cc/9QDfxRC5/aula04-cabecalho.png'>

### Criação de gráficos de Candlestick com Matplotlib
![Candlestick Chart](https://i.imgur.com/84LtMlN.png)


![Candlestick](https://www.bussoladoinvestidor.com.br/wp-content/uploads/2019/12/upload_cms_candlestick_Candlestick1.png)

Fonte: https://www.bussoladoinvestidor.com.br/grafico-de-candlestick/
"""

# Instala pacote mplfinance
!pip install mplfinance

# Importa bibliotecas necessárias ao projeto
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import mplfinance as mpf
import yfinance as yf  # API Yahoo Finance tem dados de ações
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# Aplicado método download() para exibir dataframe com histórico da ação PETR4 (Petrobras) em 2023
dados = yf.download('PETR4.SA', start='2023-01-01', end='2023-12-31')
dados

# Renomeia colunas com nomes em português
dados.columns = ['Abertura', 'Maximo', 'Minimo', 'Fechamento', 'Fech_Ajuste', 'Volume']
dados.head()

# Renomeia coluna Date como Data
# Datafame tem 248 linhas porque o mercado financeiro funciona somente em dias úteis
dados = dados.rename_axis('Data')
dados

# Plota gráfico com dados da coluna Fechamento usando biblioteca Pandas
# Plotar significa desenhar, ampliar, mostrar uma figura
dados['Fechamento'].plot(figsize=(10,6))
plt.title('VARIAÇÃO DO PREÇO POR DATA', fontsize=16)
plt.legend(['Fechamento'])

# Separa novo dataframe com as 60 primeiras linhas de dados
df = dados.head(60).copy()

# Converte o índice em uma coluna de data
df['Data'] = df.index

# Converte as datas para o formato numérico de matplotlib
# Isso é necessário para que o Matplotlib possa plotar as datas corretamente no gráfico
df['Data'] = df['Data'].apply(mdates.date2num)

df

# Plota grafico de candles ou velas (para cada data transformada em numero) com matplotlib
fig, ax = plt.subplots(figsize=(15, 8))

# Define largura dos candles no gráfico
width = 0.7

# Laço for para fixar configurações das velas
for i in range(len(df)): # Estabelece intervalo com medida do tamanho do dataframe (60 linhas, i percorre de 1 até 60)
    # Determina a cor do candle
    # Se o preço de fechamento for maior que o de abertura, o candle é verde (a ação valorizou no dia).
    # Se for menor, o candle é vermelho (a ação desvalorizou).
    if df['Fechamento'].iloc[i] > df['Abertura'].iloc[i]:
        color = 'green' # candle verde
    else:
        color = 'red' # candle vermelho

    # Desenha a linha vertical do candle (mecha)
    # Essa linha mostra os preços máximo (topo da linha) e mínimo (base da linha) do dia.
    # Usado `ax.plot` para desenhar uma linha vertical.
    # [df['Data'].iloc[i], df['Data'].iloc[i]] define o ponto x da linha (a data), e [df['Mínimo'].iloc[i], df['Máximo'].iloc[i]] define a altura da linha.
    ax.plot([df['Data'].iloc[i], df['Data'].iloc[i]],
            [df['Minimo'].iloc[i], df['Maximo'].iloc[i]],
            color=color,
            linewidth=1)

    # Desenha retangulo de cada candle que será centralizado na linha
    ax.add_patch(plt.Rectangle((df['Data'].iloc[i] - width/2, min(df['Abertura'].iloc[i], df['Fechamento'].iloc[i])),
                               width,
                               abs(df['Fechamento'].iloc[i] - df['Abertura'].iloc[i]),
                               facecolor=color))

# Cria dataframe das médias moveis dos valores da coluna Fechamento
df['MA7'] = df['Fechamento'].rolling(window=7).mean() # usa janela de 7 dias (seleciona dado a cada 7 dias)
df['MA14'] = df['Fechamento'].rolling(window=14).mean()  # usa janela de 14 dias (seleciona dado a cada 14 dias)

# Plota as médias móveis
ax.plot(df['Data'], df['MA7'], color='blue', label='Média Móvel 7 Dias')  # Média de 7 dias
ax.plot(df['Data'], df['MA14'], color='purple', label='Média Móvel 14 Dias')  # Média de 14 dias

# Adiciona legendas para as médias móveis
ax.legend()

# Formata o eixo x para mostrar as datas
# Configura o formato da data e a rotação para melhor legibilidade
ax.xaxis_date() # O método xaxis_date() é usado para dizer ao Matplotlib que as datas estão sendo usadas no eixo x
ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
plt.xticks(rotation=45)

# Adiciona título e rótulos para os eixos x e y
plt.title("GRÁFICO DE CANDLESTICK - PETR4.SA")
plt.xlabel("Data")
plt.ylabel("Preço")

# Adiciona uma grade para facilitar a visualização dos valores
plt.grid(True)

# Exibe o gráfico com imagem estática
plt.show()

# Cria subplots para gráfico interativo
'''
"Primeiro, criamos uma figura que conterá nossos gráficos usando make_subplots.
Isso nos permite ter múltiplos gráficos em uma única visualização.
Aqui, teremos 2 subplots: um para gráfico candlestick e outro para volume de transações."

'''
# Define parametros da figura
fig = make_subplots(rows=2, cols=1, shared_xaxes=True,
                    vertical_spacing=0.1, # Habilita compartilhamento de espaço por 2 gráficos
                    subplot_titles=('CANDLESTICKS', 'VOLUME TRANSACIONADO'),
                    row_width=[0.2, 0.7])

'''
"No gráfico de candlestick, cada candle representa um dia de negociação,
mostra o preço de abertura, fechamento, máximo e mínimo.
Vamos adicionar este gráfico à nossa figura."
'''
# Adiciona o gráfico de candlestick, com uso da função Candlestick
fig.add_trace(go.Candlestick(x=df.index,
                             open=df['Abertura'],
                             high=df['Maximo'],
                             low=df['Minimo'],
                             close=df['Fechamento'],
                             name='candlestick'),
                             row=1, col=1)

# Adiciona as médias móveis
# Adiciona também médias móveis ao mesmo subplot para análise de tendências
fig.add_trace(go.Scatter(x=df.index,
                         y=df['MA7'],
                         mode='lines',
                         name='MA7 - Média Móvel 7 Dias'),
                         row=1, col=1)

fig.add_trace(go.Scatter(x=df.index,
                         y=df['MA14'],
                         mode='lines',
                         name='MA14 - Média Móvel 14 Dias'),
                         row=1, col=1)

# Adiciona gráfico de barras para o volume
# Cria um gráfico de barras para volume de transações, que dá ideia da atividade de negociação no dia
fig.add_trace(go.Bar(x=df.index,
                     y=df['Volume'],
                     name='Volume'),
                     row=2, col=1)

# Atualiza o layout
#F Configura layout da figura, ajusta títulos, formatos de eixo e outras configurações para tornar o gráfico claro e legível.
fig.update_layout(yaxis_title='Preço',
                  xaxis_rangeslider_visible=False,  # Desativa o range slider
                  width=1100, height=600)

# Mostra o gráfico interativo
fig.show()
# Espaços no histograma de Volume Transacionado representam os dias não uteis

""">### GRÁFICO REFEITO COM A API MÁGICA!"""

# Exibe novamente dataframe com histórico da ação PETR4 (Petrobras) em 2023
dados = yf.download('PETR4.SA', start='2023-01-01', end='2023-12-31')
dados

# Cria grafico de candlestick para ação PETR4 com API mágica!
mpf.plot(dados.head(60), type='candle', figsize = (16,8), volume=True, mav=(7,14), style='yahoo')

"""> <b>DESAFIOS DA AULA 4</b>   
> - Pesquisar o que é uma tupla em Python;  
> - Buscar a ação da Apple e recriar o gráfico de Candlestick usando a biblioteca MPLFinance.

> RESOLUÇÃO DO DESAFIO 1: _O QUE É UMA TUPLA EM PYTHON_  
>
> <b>Tuplas</b> são uma sequência de objetos imutáveis, porque não podem ser alteradas depois de criadas. Geralmente são utilizadas para guardar dados protegidos. As tuplas são escritas entre parênteses ( ).  
>
> Uma <b>tupla em Python</b> é semelhante a uma lista. Ela se diferencia da lista por não ser possível alterar os elementos de uma tupla depois de atribuída, já a lista pode ter alteração em seus elementos.  
>
> Vejamos a seguir exemplos de códigos para criar e verificar uma tupla.  
>  
> Fonte: [Python Iluminado](https://pythoniluminado.netlify.app/tuplas)
"""

# Como definir uma tupla em Python
acoes = ("PETR4","APPL","VALE3","BBAS3","GGBR4")
print(acoes)

# Confere tipo de dado com o método type
type(acoes)

# Tentativa de atualizar a tupla
acoes[0] = "PETR3"

# Como as tuplas são imutáveis, se tentarmos modificar uma, retorna um erro do tipo TypeError.

"""> TUPLAS ou LISTAS: quando devemos usar uma Tupla e não uma Lista  
>  
> - A execução do programa é mais rápida quando há manipulação de uma tupla do que de uma lista equivalente.  
> - Se há necessidade que os dados não sejam modificados, porque determinados valores em uma coleção devem ser constantes no programa.  
> - Utilizar uma Tupla protege contra acidentes de modificação.  
>
> Fonte: [Python Iluminado](https://pythoniluminado.netlify.app/tuplas)

> RESOLUÇÃO DO DESAFIO 2: _BUSCAR A AÇÃ0 DA APPLE E RECRIAR O GRÁFICO DE CANDLESTICK COM A BIBLIOTECA [MPLFinance](https://pypi.org/project/mplfinance/)_
"""

# Exibe dataframe com histórico da ação AAPL (Apple) em 2023
dados2 = yf.download('AAPL', start='2023-01-01', end='2023-12-31')
dados2

# Cria grafico de candlestick para ação APPL com API mágica!
mpf.plot(dados2.head(60), type='candle', figsize = (16,8), volume=True, mav=(7,14), style='yahoo')

# Cria grafico de candlestick para ação APPL com API mágica sem parãmetro de estilo
mpf.plot(dados2.head(60), type='candle', figsize = (16,8), volume=True, mav=(7,14))

# Cria grafico de candlestick para ação APPL com API mágica e estilo 'mike'
mpf.plot(dados2.head(60), type='candle', figsize = (16,8), volume=True, mav=(7,14), style='mike')