# -*- coding: utf-8 -*-
"""Imersao-Python-Aula05.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x3Qr1tzCJZXyGSDTtCnJ6J7Efgpsc7u5

# Aula 5 da Imersão Python: Do Excel à Análise de Dados
> #### Instituição: Alura  
> #### Objetivo: fazer previsões de séries temporais de ações com Prophet.
> #### Autora: Carla Edila Silveira
> #### Data: 29/03/2024

><img src='https://i.postimg.cc/fTNpP24y/aula05-cabecalho.png'>
"""

# Importa bibliotecas do projeto
import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt
from prophet import Prophet

"""O Prophet é uma ferramenta desenvolvida pelo Facebook para fazer previsões em séries temporais, que são basicamente dados coletados ao longo do tempo, como os preços das ações. É famoso por ser fácil de usar e por funcionar bem mesmo com poucos dados ou com dados que possuem padrões irregulares, o que é comum no mercado de ações.

Vamos usar dados de ações da empresa Johnson & Johnson como exemplo.

Aqui, usamos um comando para baixar os dados. É como se estivéssemos pedindo à internet para nos dar os preços das ações da Johnson & Johnson desde 2020 até o final de 2023. Fácil, né?
"""

# Baixa dados dos últimos quatro anos para uma ação específica (Jonnson & Johnson)
# dados = yf.download("JNJ", start="2020-01-01", end="2023-12-31", progress=False)
# dados = dados.reset_index()
# dados

# Baixa dados dos últimos 4 anos da ação BBAS3 (Banco do Brasil)
dados = yf.download("BBAS3.SA", start="2020-01-01", end="2023-12-31", progress=False)
dados = dados.reset_index()
dados

"""Agora, dividimos nossos dados em duas partes: uma para treinar nosso 'adivinho' digital, que é até julho de 2023, e outra para testar nossas previsões, que é o restante do ano."""

# Divide os dados em treino (até o final do 1o. semestre de 2023) e teste (2o. semestre de 2023)
dados_treino = dados[dados['Date'] < '2023-07-31']
dados_teste = dados[dados['Date'] >= '2023-07-31']

# Mostra dataframe dos dados de treino
dados_treino

# Mostra dataframe dos dados de teste
dados_teste

# Prepara os dados para o FBProphet trabalhar com 2 colunas (Data e Close) renomeadas como 'ds' e 'y'
# Close é a coluna da previsão
dados_prophet_treino = dados_treino[['Date', 'Close']].rename(columns={'Date': 'ds', 'Close': 'y'})

# Mostra dataframe selecionado para treino com Prophet
dados_prophet_treino

"""O próximo passo é preparar os dados para o nosso adivinho, o Prophet. É como se estivéssemos arrumando os dados para que ele entenda o que estamos perguntando.

Depois, criamos o modelo do Prophet. Aqui, estamos dizendo ao Prophet para considerar padrões semanais e anuais nos dados, mas não diários. E também adicionamos feriados dos EUA, já que eles podem influenciar o preço das ações.
"""

# Cria e treina o modelo
# A sazonalidade é importante por considerar mudanças que ocorrem em certos períodos
modelo = Prophet(weekly_seasonality=True,  # sazonalidade semanal
        yearly_seasonality=True,  # sazonalidade anual
        daily_seasonality=False)  # sazonalidade diária

modelo.add_country_holidays(country_name='US')

modelo.fit(dados_prophet_treino)

"""Agora, a parte mágica! Pedimos ao Prophet para prever o futuro, até o final de 2023. E então, plotamos um gráfico para ver como nossa previsão se compara com os dados reais."""

# Cria datas futuras para previsão até o final de 2023
futuro = modelo.make_future_dataframe(periods=150)
previsao = modelo.predict(futuro)

# Mostra todos os dados calculados pelo modelo
previsao

"""Neste gráfico, vocês verão três linhas. A azul mostra o preço real das ações até julho de 2023, a verde mostra os preços reais após essa data, e a laranja mostra o que o Prophet previu. A linha vermelha pontilhada marca onde começam as previsões."""

# Plota os dados de treino, teste e previsões
plt.figure(figsize=(14, 8))
plt.plot(dados_treino['Date'], dados_treino['Close'], label='Dados de Treino', color='blue')
plt.plot(dados_teste['Date'], dados_teste['Close'], label='Dados Reais (Teste)', color='green')
plt.plot(previsao['ds'], previsao['yhat'], label='Previsão', color='orange', linestyle='--')

plt.axvline(dados_treino['Date'].max(), color='red', linestyle='--', label='Início da Previsão')
plt.xlabel('Data')
plt.ylabel('Preço de Fechamento')
# plt.title('PREVISÃO DE FECHAMENTO vs DADOS REAIS - JNJ')
plt.title('PREVISÃO DE FECHAMENTO vs DADOS REAIS - BBAS3.SA')
plt.legend()
plt.show()

"""> Na 1a. execução com a ação JNJ, obteve-se o seguinte gráfico de previsões:
>
> <img src='https://i.postimg.cc/MZ1kVT08/aula05-grafico-jnj.png'>

>OBSERVAÇÕES: Esse modelo é utilizado para tarefas de previsão de demanda de estoques e vendas. Quanto à sazonalidade, por exemplo, uma empresa produtora de panetone tem sazonalidade anual e é diferente do caso de ações da bolsa de valores.
"""